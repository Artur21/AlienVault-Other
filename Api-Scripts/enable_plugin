#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This API Script add a plugin to an asset on a sensor 

'''
Usage: alienvault-api enable_plugin --sensor-ip=[ip.address] --asset-ip=[ip.address] --plugin=[plugin.cfg]

Options:
  -h, --help            show this help message and exit
  -s SENSOR_IP, --sensor-ip=SENSOR_IP
                        Sensor Address
  -a HOST_IP, --asset-ip=HOST_IP
                        Host Address
  -p PLUGIN_FILE, --plugin=PLUGIN_FILE
                        Plugin File
  -f, --force-create    Force Creation of Host if Missing (will prompt for hostname)
'''
from db.methods.sensor import get_sensor_ip_from_sensor_id,get_sensor_id_from_sensor_ip,get_sensor_ctx_by_sensor_id
from optparse import OptionParser, SUPPRESS_HELP
from apimethods.utils import is_valid_ipv4
from db.methods.host import get_host_id_by_ip_ctx
from db.methods.host import create_host
from apimethods.sensor.plugin import get_sensor_plugins_enabled_by_asset,set_sensor_plugins_enabled_by_asset,get_sensor_detector_plugins


def parse_args():
        usage = "alienvault-api enable_plugin " \
                "--sensor-ip=[ip.address] --asset-ip=[ip.address] --plugin=[plugin.cfg]"
        parser = OptionParser(usage=usage)
        
        parser.add_option("-s", "--sensor-ip", dest="sensor_ip", type="string", default=None,
                      help="Sensor Address")
        parser.add_option("-a", "--asset-ip", dest="host_ip", type="string", default=None,
                      help="Host Address")
        parser.add_option("-p", "--plugin", dest="plugin_file", type="string", default=None,
                      help="Plugin File")
        parser.add_option("-f", "--force-create", action="store_true", dest="force_create", default=False,
                        help="Force Creation of Host if Missing")
        
        (options, args) = parser.parse_args()
        
        if not options.sensor_ip:
                print "Sensor IP Required"
                print "Usage: %s" % usage
                exit(-1)
        
        if options.sensor_ip and not is_valid_ipv4(options.sensor_ip):
                print "Bad format: sensor_ip"
                print "Usage: %s" % usage
                exit(-1)
                
        if not options.host_ip:
                print "Host IP Required"
                print "Usage: %s" % usage
                exit(-1)
        
        if options.host_ip and not is_valid_ipv4(options.host_ip):
                print "Bad format: host_ip"
                print "Usage: %s" % usage
                exit(-1)
                
        if not options.plugin_file:
                print "Plugin File Needed"
                exit(-1)

        return (options, args)
        
def find_or_create_host_id(sensor_id, ctx_id, host_ip, hostname=None):
        #Lookup an Asset by IP, if found return host_id
        #If not found create asset and return new host_id
        
        #Now we need to know the host id of the host given
        rt, host_id = get_host_id_by_ip_ctx(host_ip, ctx_id)
        if not rt:
                print "Error: %s" % host_id
        elif host_id is None:
                print "Host ID missing....Let me fix that for you..."
                
                if not hostname:
                        hostname = raw_input("Hostname [NewAsset]: ")
                if not hostname:
                        hostname = 'NewAsset'
                        
                print "Inserting Host %s (%s) " % (host_ip,hostname)

                try:
                        (result, host_id) = create_host([host_ip], sensor_id, hostname)
                        if result:
                                print "Success. %s added/updated" % host_id
                        else:
                                print "Error inserting host: %s" % host_id
                                exit(-1)
                except Exception as e:
                        print "Error Inserting. Message: %s" % str(e)
                        exit(-1)
        else:
                print "Host Present(%s)" % host_id
        return host_id
        
def main():
        (options, args) = parse_args()
        print "--------------------------------------------------------------"
        #Grab sensor and host IP from options
        sensor_ip = options.sensor_ip
        asset_ip = options.host_ip
        force_create = options.force_create
        #Check the sensor
        rt, sensor_id = get_sensor_id_from_sensor_ip(sensor_ip)
        if not rt:
                print "Sensor Lookup Failed: %s" % sensor_id
                exit(-1)
        print "Found sensor with id: %s" % sensor_id                
        #Grab context
        rt, ctx = get_sensor_ctx_by_sensor_id(sensor_id)
        if not rt:
                print "Invalid or no Context found."
                exit(-1)
        #Grab input
        plugin = options.plugin_file
        #remove .cfg if present..
        plugin = plugin.replace('.cfg','')
        
        print "Checking sensor for plugin..."
        try:
                plugins_avail = get_sensor_detector_plugins(sensor_id)
        
        except APIException as e:
                print "Unable to query plugins: %s" % str(e)
                exit(-1)
                
        p2 = set((key) for key,value in plugins_avail.iteritems() if value.get('per_asset','') == True)
        if plugin not in p2:
                print "\t\tPlugin (%s) not found on sensor. Exiting." % plugin
                exit(-1)
        print "\t\tPlugin (%s) found on sensor." % plugin
        
        print "Checking for Host..."
        if force_create:
                host_id = find_or_create_host_id (sensor_id, ctx, asset_ip)
        else:
             #Now we need to know the host id of the host given
             rt, host_id = get_host_id_by_ip_ctx(asset_ip, ctx)
             if rt and host_id is not None:
                     print "\t\tHost Present(%s)" % host_id
             else:
                     print "\t\tHost Not Found! Exiting."
                     exit(-1)
                     
        print "Checking Existing Plugins for Asset..."
        try:
                plugins = get_sensor_plugins_enabled_by_asset(sensor_id)
                
        except APIException as e:
                print "Unable to query plugins: %s" % str(e)
                exit(-1)
        p = []
        #print plugins
        if plugins:
                if host_id in plugins:
                        p = plugins[host_id].keys()
                        print "\t\tCurrent Plugins for Asset: %s" % str(p)
                        if plugin in p:
                                print "\t\tPlugin Already Enabled. Exiting"
                                exit(0)
                        else:
                                print "Adding Additional Plugin To Asset"
                else:
                        print "Asset Has No Plugins Enabled....Adding..."
        else:
                print "Sensor Has No Asset Plugins Enabled...Adding..."
                
        #Add new plugin
        p.append(plugin)
        #Overwrite Device
        plugins[host_id] = p
        #Returns a job from agent-restart
        restart_agent = set_sensor_plugins_enabled_by_asset(sensor_id, plugins)
        print "All Done. Check API Log for any errors."
        
if __name__ == "__main__":
    main()
